# -*- coding: utf-8 -*-
"""finalreport3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fDQt0i7YyjP6X4EowFg5xWVBFE9nTQ7e
"""

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/MyDrive/finalreport

import numpy as np
from PIL import Image

im1 = np.array(Image.open('image1.png'))
n1, n2 = im1.shape

im2 = np.array(Image.open('image2.png'))

import copy

im1 = im1.flatten()
data1 =im1.astype(np.int16) 
im2 = im2.flatten()
data2 = im2.astype(np.int16)

a = 0
for i in range(n1**2):
  a += data1[i]
for i in range(n1**2):
  data1[i] -= a/(n1**2)

b = 0
for i in range(n2**2):
  b += data2[i]
for i in range(n2**2):
  data2[i] -= b/(n2**2)

data = np.zeros((n1**2,2))
for i in range(n1**2):
  data[i][0] = data1[i]
  data[i][1] = data2[i]

cov_matrix = np.cov(data1,data2)
eigenvalues, unique_matrix = np.linalg.eig(cov_matrix)
matrix_D = [[eigenvalues[0]**(-0.5),0],[0,eigenvalues[1]**(-0.5)]]
matrix_V = unique_matrix @ matrix_D @ unique_matrix.T
z = np.zeros((n1**2,2))
for i in range(n1**2):
  z[i] = matrix_V @ data[i]

def regularize(w): #正規化をおこなう
  n = len(w)
  sum = 0
  for i in range(n):
    sum += w[i]**2
  for i in range(n):
    w[i] *= sum**(-0.5)
  return w

import copy

w1 = [-1,1]
w2 = [5,-1]

w1 = regularize(w1)
w2 = regularize(w2)
pastw1 = copy.copy(w1)  
pastw2 = copy.copy(w2) #収束確認用に前のwをコピーしておく

diff = 1 #収束確認用
while diff >= 0.1:
  diff = 0
  sumE1_0 = 0
  sumE1_1 = 0
  for i in range(n1**2):
    sumE1_0 += (z[i][0] * np.inner(w1,z[i])**3)
    sumE1_1 += (z[i][1] * np.inner(w1,z[i])**3)
  E1 = [sumE1_0 / n1**2, sumE1_1 / n1**2]
  w1[0] = E1[0] - w1[0]*3
  w1[1] = E1[1] - w1[1]*3
  w1 = regularize(w1)
  for i in range(2):
    diff += abs(abs(pastw1[i])-abs(w1[i]))
  #1つ前のwからの変化量の合計、これが十分小さければ収束したと判断する
  pastw1 = copy.copy(w1)

diff = 1
while diff >= 0.1:
  diff = 0
  sumE2_0 = 0
  sumE2_1 = 0
  for i in range(n1**2):
    sumE2_0 += (z[i][0] * np.inner(w2,z[i])**3)
    sumE2_1 += (z[i][1] * np.inner(w2,z[i])**3)
  E2 = [sumE2_0 / n1**2, sumE2_1 / n1**2]
  w2[0] = E2[0] - w2[0]*3
  w2[1] = E2[1] - w2[1]*3
  w2 = regularize(w2)
  for i in range(2):
    diff += abs(abs(pastw2[i])-abs(w2[i]))
  pastw2 = copy.copy(w2)

W = [[w1[0],w1[1]],[w2[0],w2[1]]]

y = np.zeros((n1**2,2))
for i in range(n1**2):
  y[i] = W @ z[i]

y1 = np.zeros(n1**2)
y2 = np.zeros(n2**2)
for i in range(n1**2):
  y1[i] = y[i][0]*40 + a/(n1**2)
  y2[i] = y[i][1]*40 + b/(n2**2)

y1 = y1.astype(np.uint8)
y2 = y2.astype(np.uint8)

y1 = y1.reshape(n1,-1)
y2 = y2.reshape(n2,-1)

separatedimage1 = Image.fromarray(y1)
separatedimage2 = Image.fromarray(y2)

separatedimage1.convert("RGB").save('separatedimage1.jpg')
separatedimage2.convert("RGB").save('separatedimage2.jpg')
